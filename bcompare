#!/usr/bin/env python

# Copyright (C) 2012 Ben Challenor <ben@challenor.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


import argparse
import os
import subprocess
import sys


BCOMP_PATH = os.environ['BCOMP_PATH']
VERBOSE = False


# Convert unix paths to wine paths
def unix_to_wine(unix_paths):
  wine_path_args = ['winepath', '-w0']
  wine_path_args.extend(unix_paths)
  if VERBOSE:
    print 'wine_path_args: ' + str(wine_path_args)

  p = subprocess.Popen(wine_path_args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  out, err = p.communicate()
  assert(p.returncode == 0)

  wine_paths = out.rstrip('\0').split('\0')
  return wine_paths


# Launch
def launch(bc_args):
  wine_args = ['wine', BCOMP_PATH]
  wine_args.extend(bc_args)
  if VERBOSE:
    print 'wine_args: ' + str(wine_args)

  # subprocess.DEVNULL would be better, but it requires Python 3.3
  status = subprocess.call(wine_args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  if VERBOSE:
    print 'status: ' + str(status)
  sys.exit(status)


# Launch as diff
def diff(args):
  unix_paths = [args.local, args.remote]
  bc_args = unix_to_wine(unix_paths)
  bc_args.append('/leftreadonly')
  launch(bc_args)


# Launch as merge
def merge(args):
  unix_paths = [args.local, args.remote, args.base, args.merged]
  bc_args = unix_to_wine(unix_paths)
  launch(bc_args)


# Set up parser
parser = argparse.ArgumentParser(description='Launch Beyond Compare via Wine')
subparsers = parser.add_subparsers()

diff_parser = subparsers.add_parser('diff')
diff_parser.add_argument('local')
diff_parser.add_argument('remote')
diff_parser.set_defaults(func=diff)

merge_parser = subparsers.add_parser('merge')
merge_parser.add_argument('local')
merge_parser.add_argument('remote')
merge_parser.add_argument('base')
merge_parser.add_argument('merged')
merge_parser.set_defaults(func=merge)


# Parse args and launch corresponding function
args = parser.parse_args()
args.func(args)
